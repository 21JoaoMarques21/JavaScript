-------------------------fuctions------------------------------------

We can calculate the area of one rectangle with the following code:

const width = 10;
const height = 6;
const area =  width * height;
console.log(area); // Output: 60

-------------------------------------------

// Area of the first rectangle
const width1 = 10;
const height1 = 6;
const area1 =  width1 * height1;

// Area of the second rectangle
const width2 = 4;
const height2 = 9;
const area2 =  width2 * height2;

// Area of the third rectangle
const width3 = 10;
const height3 = 10;
const area3 =  width3 * height3;

------------------------------------------
-----Function Declarations------------

A function declaration consists of:

    - The function keyword.
    - The name of the function, or its identifier, followed by parentheses.
    - A function body, or the block of statements required to perform a specific task, enclosed in the function’s curly brackets, { }.

--------------------
greetWorld(); // Output: Hello, World!

function greetWorld() {
  console.log('Hello, World!');
}
--------------------
--------------Calling a Function----------------

function sayThanks() {
  console.log('Thank you for your purchase! We appreciate your business.');
}
sayThanks();
sayThanks();
sayThanks();
// write the same message 3 times
--------------------------------------------------
-----------Parameters and Arguments---------------

function sayThanks() {
  console.log('Thank you for your purchase! We appreciate your business.');
}

-----------Resolução-------

function sayThanks(name) {
  console.log('Thank you for your purchase ' + name + '! We appreciate your business.');
}

sayThanks('Cole');
----------------------------------
-----Default Parameters-----------

function greeting (name = 'stranger') {
  console.log(`Hello, ${name}!`)
}

greeting('Nick') // Output: Hello, Nick!
greeting() // Output: Hello, stranger!
--------------------------------------
- In the example above, we used the = operator to assign the parameter name a default value of 'stranger'. This is useful to have in case we ever want to include a non-personalized default greeting!

- When the code calls greeting('Nick') the value of the argument is passed in and, 'Nick', will override the default parameter of 'stranger' to log 'Hello, Nick!' to the console.

- When there isn’t an argument passed into greeting(), the default value of 'stranger' is used, and 'Hello, stranger!' is logged to the console.

-------------------Return-----------------

function rectangleArea(width, height) {
  let area = width * height;
}
console.log(rectangleArea(5, 7)) // Prints undefined

--------------------------------------

In the code example, we defined our function to calculate the area of a width and height parameter. Then rectangleArea() is invoked with the arguments 5 and 7. But when we went to print the results we got undefined. Did we write our function wrong? No! In fact, the function worked fine, and the computer did calculate the area as 35, but we didn’t capture it. So how can we do that? With the keyword return!
-----------------------------------------------
function rectangleArea(width, height) {
  if (width < 0 || height < 0) {
    return 'You need positive integers to calculate area!';
  }
  return width * height;
}
----------------------------------------------
 If an argument for width or height is less than 0, then rectangleArea() will return 'You need positive integers to calculate area!'. The second return statement width * height will not run.

The return keyword is powerful because it allows functions to produce an output. We can then save the output to a variable for later use. 

--------------Helper Functions---------------------

We can also use the return value of a function inside another function. These functions being called within another function are often referred to as helper functions. Since each function is carrying out a specific task, it makes our code easier to read and debug if necessary. 
--------------
function multiplyByNineFifths(number) {
  return number * (9/5);
};

function getFahrenheit(celsius) {
  return multiplyByNineFifths(celsius) + 32;
};

getFahrenheit(15); // Returns 59
----------------------------------
In the example above:

    - getFahrenheit() is called and 15 is passed as an argument.
    - The code block inside of getFahrenheit() calls multiplyByNineFifths() and passes 15 as an argument.
    - multiplyByNineFifths() takes the argument of 15 for the number parameter.
    - The code block inside of multiplyByNineFifths() function multiplies 15 by (9/5), which evaluates to 27.
    - 27 is returned back to the function call in getFahrenheit().
    - getFahrenheit() continues to execute. It adds 32 to 27, which evaluates to 59.
    - Finally, 59 is returned back to the function call getFahrenheit(15).
--------------------------------------

------Function Expressions------------

o declare a function expression:

   - Declare a variable to make the variable’s name be the name, or identifier, of your function. Since the release of ES6, it is common practice to use const as the keyword to declare the variable.

   - Assign as that variable’s value an anonymous function created by using the function keyword followed by a set of parentheses with possible parameters. Then a set of curly braces that contain the function body.

variableName(argument1, argument2)

const plantNeedsWater = function(day) {
  if(day === 'Wednesday'){
    return true;
  } else {
    return false;
  }
};

plantNeedsWater('Tuesday');

console.log(plantNeedsWater('Tuesday'));

-----------------------------------------------
-----Arrow Functions-------------------

ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () => notation. 

Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { } like this:
-------------------------------------------------
const rectangleArea = (width, height) => {
  let area = width * height;
  return area;
};
--------------------------------------------------
---------Concise Body Arrow Functions -------------

const squareNum = (num) => {
  return num * num;
};
-----or-----
const squareNum = num => num * num;
------------------------------------------
const plantNeedsWater = day => day === 'Wednesday' ? true : false;
---------------------------------------------
---------