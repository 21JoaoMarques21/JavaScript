----------Blocks and Scope----------

We’ve seen blocks used before in functions and if statements. A block is the code found inside a set of curly braces {}. Blocks help us group one or more statements together and serve as an important structural marker for our code. 
----
const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // blue 
}
----
Observe the block in an if statement:
----
if (dusk) {
  let color = 'pink';
  console.log(color); // pink
}
----
const city = 'New York City';

const logCitySkyline = () => {
  let skyscraper = 'Empire State Building';
  return 'The stars over the ' + skyscraper + ' in ' + city;
};

console.log(logCitySkyline());
---------------------------
-------Global Scope-----------
Scope is the context in which our variables are declared. We think about scope in relation to blocks because variables can exist either outside of or within these blocks.

In global scope, variables are declared outside of blocks. These variables are called global variables. Because global variables are not bound inside a block, they can be accessed by any code in the program, including code in blocks.
-------------------
const color = 'blue';

const returnSkyColor = () => {
  return color; // blue 
};

console.log(returnSkyColor()); // blue
---------------------
const logVisibleLightWaves = () => {
  const lightWaves = 'Moonlight';
  console.log(lightWaves);
};

logVisibleLightWaves();

// console.log(lightWaves);
------------------------
-----------Scope Pollution-------------

Scope pollution is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes. Scope pollution makes it difficult to keep track of our different variables and sets us up for potential accidents. For example, globally scoped variables can collide with other variables that are more locally scoped, causing unexpected behavior in our code. 
-------
let num = 50;

const logNum = () => {
  num = 100; // Take note of this line of code
  console.log(num);
};

logNum(); // Prints 100
console.log(num); // Prints 100
-----------------
You’ll notice:

  - We have a variable num.
  - Inside the function body of logNum(), we want to declare a new variable but forgot to use the let keyword.
  - When we call logNum(), num gets reassigned to 100.
  - The reassignment inside logNum() affects the global variable num.
  - Even though the reassignment is allowed and we won’t get an error, if we decided to use num later, we’ll unknowingly use the new value of num.

---------Practice Good Scoping-------------

Tightly scoping your variables will greatly improve your code in several ways:

  - It will make your code more legible since the blocks will organize your code into discrete sections.
  - It makes your code more understandable since it clarifies which variables are associated with different parts of the program rather than having to keep track of them line after line!
  - It’s easier to maintain your code, since your code will be modular.
  - It will save memory in your code because it will cease to exist after the block finishes running.
---example----
const logSkyColor = () => {
  const dusk = true;
  let color = 'blue'; 
  if (dusk) {
    let color = 'pink';
    console.log(color); // Prints "pink"
  }
  console.log(color); // Prints "blue"
};

console.log(color); // throws a ReferenceError
--------------------

Here, you’ll notice:

  - We create a variable color inside the logSkyColor() function.
  - After the if statement, we define a new code block with the {} braces. Here we assign a new value to the variable color if the if statement is truthy.
  - Within the if block, the color variable holds the value 'pink', though outside the if block, in the function body, the color variable holds the value 'blue'.
  - On the last line, we attempt to print the value of color outside both the if statement and the definition of logSkyColor(). This will throw a ReferenceError since color only exists within the scope of those two blocks — it is never defined in the global scope.
  - While we use block scope, we still pollute our namespace by reusing the same variable name twice. A better practice would be to rename the variable inside the block.

------exercise--------

const logVisibleLightWaves = () => {
  let lightWaves = 'Moonlight';
	let region = 'The Arctic';
  // Add if statement here:
  if (region === 'The Arctic'){
    let lightWaves = 'Northern Lights';
    console.log(lightWaves);
  }
  
  console.log(lightWaves);
};

logVisibleLightWaves();
