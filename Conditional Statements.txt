Conditional Statements

If...Else Statements


In programming, we can also perform a task based on a condition using an if statement
-------------------------
if (true) {
  console.log('This message will print!'); 
}
// Prints: This message will print!
------------------------------

- The if keyword followed by a set of parentheses () which is followed by a code block, or block statement, indicated by a set of curly braces {}.
- Inside the parentheses (), a condition is provided that evaluates to true or false.
- If the condition evaluates to true, the code inside the curly braces {} runs, or executes.
- If the condition evaluates to false, the block won’t execute.

https://www.codecademy.com/learn/introduction-to-javascript/modules/learn-javascript-control-flow/cheatsheet

--------------------------------------------------------


If we wanted to add some default behavior to the if statement, we can add an
Preview: Docs Conditionals evaluate an expression (a piece of code that produces a value) to determine whether it is true or false.
else statement
to run a block of code when the condition evaluates to false. Take a look at the inclusion of an else statement: 
--------------------------
if (false) {
  console.log('The code in this block will not run.');
} else {
  console.log('But the code in this block will!');
}

// Prints: But the code in this block will!
------------------------

An else statement must be paired with an if statement, and together they are referred to as an if...else statement.

-------------------------------------------------------------------------------------

Comparison Operators

When writing conditional statements, sometimes we need to use different types of operators to compare values. These operators are called comparison operators.

Here is a list of some handy comparison operators and their syntax:

    - Less than: <
    - Greater than: >
    - Less than or equal to: <=
    - Greater than or equal to: >=
    - Is equal to: ===
    - Is not equal to: !==

It can be helpful to think of comparison statements as questions. When the answer is “yes”, the statement evaluates to true, and when the answer is “no”, the statement evaluates to false. The code above would be asking: is 10 less than 12? Yes! So 10 < 12 evaluates to true. 

 the example above, we’re using the identity operator (===) to check if the string 'apples' is the same as the string 'oranges'. Since the two strings are not the same, the comparison statement evaluates to false.

All comparison statements evaluate to either true or false and are made up of:

    Two values that will be compared.
    An operator that separates the values and compares them accordingly (>, <, <=,>=,===,!==).

----------------------------------------
Logical Operators

Working with
Preview: Docs Loading link description
conditionals
means that we will be using booleans, true or false values. In JavaScript, there are
Preview: Docs Loading link description
operators
that work with boolean values known as logical operators. We can use logical operators to add more sophisticated logic to our conditionals. There are three logical operators:

    - the and operator (&&)
    - the or operator (||)
    - the not operator, otherwise known as the bang operator (!)

When we use the && operator, we are checking that two things are true: 
--------------------
if (stopLight === 'green' && pedestrians === 0) {
  console.log('Go!');
} else {
  console.log('Stop');
}
---------------------

When using the && operator, both conditions must evaluate to true for the entire condition to evaluate to true and execute. Otherwise, if either condition is false, the && condition will evaluate to false and the else block will execute.

If we only care about either condition being true, we can use the || operator:
-------------------------------

if (day === 'Saturday' || day === 'Sunday') {
  console.log('Enjoy the weekend!');
} else {
  console.log('Do some work.');
}
------------------------------

When using the || operator, only one of the conditions must evaluate to true for the overall statement to evaluate to true. In the code example above, if either day === 'Saturday' or day === 'Sunday' evaluates to true the if‘s condition will evaluate to true and its code block will execute. If the first condition in an || statement evaluates to true, the second condition won’t even be checked. Only if day === 'Saturday' evaluates to false will day === 'Sunday' be evaluated. The code in the else statement above will execute only if both comparisons evaluate to false.

The ! not operator reverses, or negates, the value of a boolean:
-------------------------------
let excited = true;
console.log(!excited); // Prints false

let sleepy = false;
console.log(!sleepy); // Prints true
-----------------------------

Truthy and Falsy

let myVariable = 'I Exist!';

if (myVariable) {
   console.log(myVariable)
} else {
   console.log('The variable does not exist.')
}
------------------
The code block in the if statement will run because myVariable has a truthy value; even though the value of myVariable is not explicitly the value true, when used in a boolean or conditional context, it evaluates to true because it has been assigned a non-falsy value.

So which values are falsy— or evaluate to false when checked as a condition? The list of falsy values includes:

    0
    Empty strings like "" or ''
    null which represent when there is no value at all
    undefined which represent when a declared variable lacks a value
    NaN, or Not a Number
----------------------
let numberOfApples = 0;

if (numberOfApples){
   console.log('Let us eat apples!');
} else {
   console.log('No apples left!');
}

// Prints 'No apples left!'
-----------------------------

let username = '';
let defaultName;

if (username) {
  defaultName = username;
} else {
  defaultName = 'Stranger';
}

console.log(defaultName); // Prints: Stranger
-----------------------
let username = '';
let defaultName = username || 'Stranger';

console.log(defaultName); // Prints: Stranger
-----------------------
Because || or statements check the left-hand condition first, the variable defaultName will be assigned the actual value of username if it is truthy, and it will be assigned the value of 'Stranger' if username is falsy. This concept is also referred to as short-circuit evaluation. 


--------------Ternary Operator---------------------

 let isNightTime = true;

if (isNightTime) {
  console.log('Turn on the lights!');
} else {
  console.log('Turn off the lights!');
}

------------------------------------------------

We can use a ternary operator to perform the same functionality: 

isNightTime ? console.log('Turn on the lights!') 
: console.log('Turn off the lights!');

----------------------------------------------------------
In the example above:

    The condition, isNightTime, is provided before the ?.
    Two expressions follow the ? and are separated by a colon :.
    If the condition evaluates to true, the first expression executes.
    If the condition evaluates to false, the second expression executes.

Like if...else statements , ternary operators can be used for conditions which evaluate to true or false.
-------------------------pratica
let isLocked = false;

isLocked ? console.log('You will need a key to open the door.'): console.log('You will not need a key to open the door.');

let isCorrect = true;

isCorrect ? console.log('Correct!') : console.log('Incorrect!');

let favoritePhrase = 'Love That!';

favoritePhrase === 'Love That!'? console.log('I love that!') : console.log("I don't love that!");
------------------------------

-----------Else If Statements--------------

We can add more conditions to our if...else with an else if statement. The else if statement allows for more than two possible outcomes. You can add as many else if statements as you’d like, to make more complex conditionals! The else if statement always comes after the if statement and before the else statement. The else if statement also takes a condition. Let’s take a look at the syntax:
------------------
let stopLight = 'yellow';

if (stopLight === 'red') {
  console.log('Stop!');
} else if (stopLight === 'yellow') {
  console.log('Slow down.');
} else if (stopLight === 'green') {
  console.log('Go!');
} else {
  console.log('Caution, unknown!');
}
------------------

------The switch keyword-------------

let groceryItem = 'papaya';

if (groceryItem === 'tomato') {
  console.log('Tomatoes are $0.49');
} else if (groceryItem === 'papaya'){
  console.log('Papayas are $1.29');
} else {
  console.log('Invalid item');
}

-----------------------------------
A switch statement evaluates an expression and allows different blocks of code to execute depending on the result of that expression.
switch statement
provides an alternative syntax that is easier to read and write. A switch statement looks like this:
-------------
let groceryItem = 'papaya';

switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
}

// Prints 'Papayas are $1.29'
-------------------------------------

